How did viewing a diff between two versions of a file help you see the bug that was introduced?

By highlighting what had changed between documents it was much easier to check the areas that 
differed and spot the mistake. It was also useful that -- and ++ was used to show you which
version was which. 



How could having easy access to the entire history of a file make you a more efficient programmer 
in the long term?

I can help you see what's changed over time and so instead of having to remember everything, you 
could look back in your files and grab code from past versions or compare new files that work
with older files that don't work any more becuase of some upgrade or programming syntax change.




What do you think are the pros and cons of manually choosing when to create a commit, like you do
in Git vs having versions automatically saved, like Google docs does?

The pros are that your commits are meaningful and useful and the cons are that they're subjective
so unless you're working on a team that all commit using the same logic, you can run into problems.




Why do you think some version control systems, like Git, allow saving multiple files in one commit, 
while others, like Google Docs, treat each file seperately?

Becuase it makes sense when you have a set of file dependencies to change them all at once. Things
would rapidly become very complex and messy if each individual file were changed and commited seperately.




How can you use the commands git log and git diff to view the history of files?

These commands enable you to see all the logged items by hitting the down arrow you can see everything. 
You need to hit Q(lowercase) to escape for the log. Then you can use the diff command to compare the files
but make sure you've entered git config --global color.ui auto prior to going there. The steps are as follows:

1. $ cd *
2. $ git config --global color.ui auto
3. $ git log
4. $ q
5. $ diff *older *newer




How might using version control make you more confident to make changes that could break something?

Knowing you have a fallback and can test where critical bugs are introduced is a huge help and can 
save hours of time and computer tossing/smashing. Version control enables us to try things, test things
and live in the confidence that even if we really mess something up we can go back to a working version
and start over. This can save us hours of time because we don't have to start from scratch if things go 
badly. 



Now that you have your workspace set up, what do yo uwant to try using it for?

Probably getting my head around commits and diffs more. Hoping it will be easier to cut and past commit IDs and compare files. 
