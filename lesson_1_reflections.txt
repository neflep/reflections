Q: How did viewing a diff between two versions of a file help you see the bug that was introduced?

A: By highlighting what had changed between documents it was much easier to check the areas that 
differed and spot the mistake. It was also useful that -- and ++ were used to show you which
version was which. 



Q: How could having easy access to the entire history of a file make you a more efficient programmer 
in the long term?

A: It helps you see what's changed over time and so instead of having to remember everything, you 
could look back in your files and grab code from past versions or compare new files that work
with older files that don't work any more becuase of some upgrade or programming syntax change.




Q: What do you think are the pros and cons of manually choosing when to create a commit, like you do
in Git vs having versions automatically saved, like Google docs does?

A: Pro: Your commits are meaningful and useful and you don't live in fear of having your files committed while
you're away from your work station. 
Con: Your commits are done in a subjective way that can lead to problems if you're working on a team but using 
different subjective logic to save files. You may also find that you have either too many or too few commits 
for a project until you get used to finding the right balance.



Q: Why do you think some version control systems, like Git, allow saving multiple files in one commit, 
while others, like Google Docs, treat each file seperately?

A: Becuase it makes sense when you have a set of file dependencies to change them all at once. Things
would rapidly become very complex and messy if each individual file were changed and commited seperately.




Q: How can you use the commands git log and git diff to view the history of files?

A: These commands enable you to see all the logged items by hitting the down arrow you can see everything. 
You need to hit Q(lowercase) to escape from the log. Then you can use the diff command to compare the files
but make sure you've entered git config --global color.ui auto prior to going there. The steps are as follows:

1. $ cd *
2. $ git config --global color.ui auto
3. $ git log
4. $ q
5. $ diff *older *newer




Q: How might using version control make you more confident to make changes that could break something?

A: Knowing you have a fallback and can test where critical bugs are introduced is a huge help and can 
save hours of time and computer tossing/smashing. Version control enables us to try things, test things
and live in the confidence that even if we really mess something up we can go back to a working version
and start over. This can save us hours of time because we don't have to start from scratch if things go 
badly. 



Q: Now that you have your workspace set up, what do yo uwant to try using it for?

A: Probably getting my head around commits and diffs more. Hoping it will be easier to cut and past 
commit IDs and compare files. 
